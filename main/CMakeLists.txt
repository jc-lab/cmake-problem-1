cmake_minimum_required(VERSION 3.14)
project(main)

set(CMAKE_CXX_STANDARD 14)

#
# Find LZMA
#
FIND_PACKAGE(LibLZMA)

message("LIBLZMA_FOUND = ${LIBLZMA_FOUND}")

IF(LIBLZMA_FOUND)
    SET(HAVE_LIBLZMA 1)
    SET(HAVE_LZMA_H 1)
    CMAKE_PUSH_CHECK_STATE()
    SET(CMAKE_REQUIRED_INCLUDES ${LIBLZMA_INCLUDE_DIR})
    SET(CMAKE_REQUIRED_LIBRARIES ${LIBLZMA_LIBRARIES})
    INCLUDE_DIRECTORIES(${LIBLZMA_INCLUDE_DIRS})
    LIST(APPEND ADDITIONAL_LIBS ${LIBLZMA_LIBRARIES})
    # Test if a macro is needed for the library.
    TRY_MACRO_FOR_LIBRARY(
            "${LIBLZMA_INCLUDE_DIRS}" "${LIBLZMA_LIBRARIES}"
            COMPILES
            "#include <lzma.h>\nint main() {return (int)lzma_version_number(); }"
            "WITHOUT_LZMA_API_STATIC;LZMA_API_STATIC")
    IF(NOT WITHOUT_LZMA_API_STATIC AND LZMA_API_STATIC)
        ADD_DEFINITIONS(-DLZMA_API_STATIC)
    ENDIF(NOT WITHOUT_LZMA_API_STATIC AND LZMA_API_STATIC)
    CMAKE_POP_CHECK_STATE()
ELSE(LIBLZMA_FOUND)
    # LZMA not found and will not be used.
ENDIF(LIBLZMA_FOUND)
MARK_AS_ADVANCED(CLEAR LIBLZMA_INCLUDE_DIR)
MARK_AS_ADVANCED(CLEAR LIBLZMA_LIBRARY)

add_executable(main main.cpp)
